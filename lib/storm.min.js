(function(){var t;window.Storm=t={},t.bolts={},t.keywords={},t.install=function(e){return $.get(e,function(r){return t.load(t.idFromURL(e),r)})},t.idFromURL=function(t){return""+CryptoJS.SHA1(t)},t.load=function(e,r){var o;return o=new t.Bolt(e,r),t.register(o)},t.register=function(e){return t.bolts[e.id]=e,t.keywords[e.getKeyword()]=t.keywords[e.getKeyword()]||[],t.keywords[e.getKeyword()].push(e.id)},t.terminateAll=function(){var e,r,o,n;o=t.bolts,n=[];for(r in o)e=o[r],n.push(e.terminate());return n},t.utils={prefixMatch:function(t,e){return 0===e.search(RegExp("^"+t,"i"))},fuzzyMatch:function(t,e,r){return null==r&&(r=0),e.score(t)>r}},t.BOLT_API=WWRPC.defineProtocol({result:WWRPC.remote(function(t){return this.result(t)})}),t.Bolt=function(){function e(t,e){this.id=t,this.code=e,this.worker=null,this.metadata={},this.processMetadata()}return e.prototype.getKeyword=function(){return this.metadata.keyword},e.prototype.processMetadata=function(){var t,e,r,o,n,i,s;for(s=this.code.split(/\n/g),n=0,i=s.length;i>n;n++){if(e=s[n],r=e.match(/^\/\/\s+(\w+):\s?(.+?)$/),!r)return;t=r[1],o=r[2],this.set(t,o)}},e.prototype.set=function(t,e){return this.metadata[t]=e},e.prototype.process=function(t){return t.command.keyword===this.getKeyword()?this.run(t):t.result({title:this.metadata.name,description:this.metadata.description})},e.prototype.wrappedCode=function(){return"(function() {\n"+this.code+"\n})"},e.prototype.run=function(e){return this.worker=WWRPC.spawnWorker(t.BOLT_API,e),this.worker.loadCode(this.wrappedCode())},e.prototype.terminate=function(){return this.worker?(this.worker.terminate(),this.worker=null):void 0},e}(),t.Command=function(){function t(t){this.text=t,this.tokens=this.text.split(/\s+/g),this.keyword=this.tokens[0],this.hasKeyword=this.keyword&&this.keyword.length>0,this.query=this.text.replace(RegExp("^"+this.keyword+"\\s+"),"")}return t}(),t.Query=function(){function e(e){this.command=new t.Command(e)}return e.prototype.run=function(){var e,r,o,n,i,s;t.terminateAll(),s=t.keywords;for(o in s)if(r=s[o],t.utils.fuzzyMatch(this.command.keyword,o))for(n=0,i=r.length;i>n;n++)e=r[n],t.bolts[e].process(this);return null},e.prototype.result=function(t){return console.log(t)},e}()}).call(this);